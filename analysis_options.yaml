include: package:flutter_lints/flutter.yaml

analyzer:
  exclude: ["build/**", "**/*.g.dart"]
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

linter:
  rules:
    # Avoid relative imports for files in lib/.
    # always_use_package_imports: error

    # Avoid method calls or property accesses on a “dynamic” target.
    # avoid_dynamic_calls: error

    # Avoid empty else statements.
    avoid_empty_else: error

    # Avoid print calls in production code.
    avoid_print: error

    # Avoid relative imports for files in lib/.
    avoid_relative_lib_imports: error

    # Avoid returning null for Future.
    # avoid_returning_null_for_future: error

    # Avoid slow async dart:io methods.
    # avoid_slow_async_io: error

    # Avoid .toString() in production code since results may be minified.
    # avoid_type_to_string: error

    # Avoid types as parameter names.
    avoid_types_as_parameter_names: error

    # Avoid using web-only libraries outside Flutter web plugin packages.
    avoid_web_libraries_in_flutter: error

    # Cancel instances of dart.async.StreamSubscription.
    # cancel_subscriptions: error

    # Close instances of dart.core.Sink.
    # close_sinks: error

    # Invocation of various collection methods with arguments of unrelated types.
    # This rule is experimental. Use at your own risk.
    # collection_methods_unrelated_type: error

    # Only reference in scope identifiers in doc comments.
    # comment_references: error

    # Avoid control flow in finally blocks.
    control_flow_in_finally: error

    # DO reference all public properties in debug methods.
    # diagnostic_describe_all_properties: error

    # Don’t invoke asynchronous functions in non-async blocks.
    # discarded_futures: error

    # Avoid empty statements.
    empty_statements: error

    # Always override hashCode if overriding ==.
    hash_and_equals: error

    # Conditions should not unconditionally evaluate to true or to false.
    # This rule is deprecated. Do not use it.
    # invariant_booleans: error

    # Invocation of Iterable.contains with references of unrelated types.
    iterable_contains_unrelated_type: error

    # Invocation of remove with references of unrelated types.
    list_remove_unrelated_type: error

    # Boolean expression composed only with literals.
    # literal_only_boolean_expressions: error

    # Don’t use adjacent strings in list.
    # no_adjacent_strings_in_list: error

    # Don’t use more than one case with same value.
    no_duplicate_case_values: error

    # Don’t put any logic in createState.
    no_logic_in_create_state: error

    # Prefer relative imports for files in lib/.
    # prefer_relative_imports: error

    # Don’t use the Null type, unless you are positive that you don’t want void.
    prefer_void_to_null: error

    # Test type arguments in operator ==(Object other).
    # test_types_in_equals: error

    # Avoid throw in finally block.
    # throw_in_finally: error

    # Avoid using unnecessary statements.
    # unnecessary_statements: error

    # Equality operator == invocation with references of unrelated types.
    unrelated_type_equality_checks: error

    # Avoid unsafe HTML APIs.
    # unsafe_html: error

    # Do not use BuildContexts across async gaps.
    # This rule is experimental. Use at your own risk.
    # use_build_context_synchronously: error

    # Use key in widget constructors.
    use_key_in_widget_constructors: error

    # Use valid regular expression syntax.
    valid_regexps: error

    # Declare method return types.
    # always_declare_return_types: error

    # Separate the control structure expression from its statement.
    # always_put_control_body_on_new_line: error

    # Put required named parameters first.
    # always_put_required_named_parameters_first: error

    # Specify @required on named parameters without defaults.
    always_require_non_null_named_parameters: error

    # Specify type annotations.
    # always_specify_types: error

    # Annotate overridden members.
    annotate_overrides: error

    # Avoid annotating with dynamic when not required.
    # avoid_annotating_with_dynamic: error

    # Avoid using as.
    # This rule is deprecated. Do not use it.
    # avoid_as: error

    # Avoid bool literals in conditional expressions.
    # avoid_bool_literals_in_conditional_expressions: error

    # Avoid catches without on clauses.
    # avoid_catches_without_on_clauses: error

    # Don’t explicitly catch Error or types that implement it.
    # avoid_catching_errors: error

    # Avoid defining a class that contains only static members.
    # avoid_classes_with_only_static_members: error

    # Avoid double and int checks.
    # avoid_double_and_int_checks: error

    # Avoid overloading operator == and hashCode on classes not marked @immutable.
    # avoid_equals_and_hash_code_on_mutable_classes: error

    # Avoid escaping inner quotes by converting surrounding quotes.
    # avoid_escaping_inner_quotes: error

    # Avoid field initializers in const classes.
    # avoid_field_initializers_in_const_classes: error

    # Avoid final for parameter declarations.
    # avoid_final_parameters: error

    # Avoid using forEach with a function literal.
    avoid_function_literals_in_foreach_calls: error

    # Don’t implement classes that override ==.
    # avoid_implementing_value_types: error

    # Don’t explicitly initialize variables to null.
    avoid_init_to_null: error

    # Avoid JavaScript rounded ints.
    # avoid_js_rounded_ints: error

    # Don’t declare multiple variables on a single line.
    # avoid_multiple_declarations_per_line: error

    # Don’t check for null in custom == operators.
    avoid_null_checks_in_equality_operators: error

    # Avoid positional boolean parameters.
    # avoid_positional_boolean_parameters: error

    # Avoid private typedef functions.
    # avoid_private_typedef_functions: error

    # Avoid redundant argument values.
    # avoid_redundant_argument_values: error

    # Don’t rename parameters of overridden methods.
    avoid_renaming_method_parameters: error

    # Avoid return types on setters.
    avoid_return_types_on_setters: error

    # Avoid returning null from members whose return type is bool, double, int, or num.
    # avoid_returning_null: error

    # Avoid returning null for void.
    avoid_returning_null_for_void: error

    # Avoid returning this from methods just to enable a fluent interface.
    # avoid_returning_this: error

    # Avoid setters without getters.
    # avoid_setters_without_getters: error

    # Avoid shadowing type parameters.
    avoid_shadowing_type_parameters: error

    # Avoid single cascade in expression statements.
    avoid_single_cascade_in_expression_statements: error

    # Avoid annotating types for function expression parameters.
    # avoid_types_on_closure_parameters: error

    # Avoid unnecessary containers.
    avoid_unnecessary_containers: error

    # Avoid defining unused parameters in constructors.
    # avoid_unused_constructor_parameters: error

    # Avoid async functions that return void.
    # avoid_void_async: error

    # Await only futures.
    await_only_futures: error

    # Name extensions using UpperCamelCase.
    camel_case_extensions: error

    # Name types using UpperCamelCase.
    camel_case_types: error

    # Cascade consecutive method invocations on the same reference.
    # cascade_invocations: error

    # Don’t cast a nullable value to a non nullable type.
    # This rule is experimental. Use at your own risk.
    # cast_nullable_to_non_nullable: error

    # Sort combinator names alphabetically.
    # This rule is experimental. Use at your own risk.
    # combinators_ordering: error

    # Missing conditional import.
    # conditional_uri_does_not_exist: error

    # Prefer using lowerCamelCase for constant names.
    constant_identifier_names: error

    # DO use curly braces for all flow control structures.
    curly_braces_in_flow_control_structures: error

    # Attach library doc comments to library directives.
    # This rule is experimental. Use at your own risk.
    # dangling_library_doc_comments: error

    # Missing deprecated annotation.
    # deprecated_consistency: error

    # Adhere to Effective Dart Guide directives sorting conventions.
    # directives_ordering: error

    # Do not use environment declared variables.
    # do_not_use_environment: error

    # Avoid empty catch blocks.
    empty_catches: error

    # Use ; instead of {} for empty constructor bodies.
    empty_constructor_bodies: error

    # Do use sound null safety.
    # This rule is experimental. Use at your own risk.
    # enable_null_safety: error

    # Put a single newline at end of file.
    # eol_at_end_of_file: error

    # Define case clauses for all constants in enum-like classes.
    exhaustive_cases: error

    # Name source files using lowercase_with_underscores.
    file_names: error

    # Use Flutter TODO format: // TODO(username): message, https://URL-to-issue.
    # flutter_style_todos: error

    # Don’t import implementation files from another package.
    implementation_imports: error

    # Explicitly tear-off call methods when using an object as a Function.
    # This rule is experimental. Use at your own risk.
    # implicit_call_tearoffs: error

    # Join return statement with assignment when possible.
    # join_return_with_assignment: error

    # Start multiline strings with a newline.
    # leading_newlines_in_multiline_strings: error

    # Attach library annotations to library directives.
    # This rule is experimental. Use at your own risk.
    # library_annotations: error

    # Name libraries using lowercase_with_underscores.
    library_names: error

    # Use lowercase_with_underscores when specifying a library prefix.
    library_prefixes: error

    # Avoid using private types in public APIs.
    library_private_types_in_public_api: error

    # Avoid lines longer than 80 characters.
    # lines_longer_than_80_chars: error

    # Missing whitespace between adjacent strings.
    # missing_whitespace_between_adjacent_strings: error

    # No default cases.
    # This rule is experimental. Use at your own risk.
    # no_default_cases: error

    # Avoid leading underscores for library prefixes.
    no_leading_underscores_for_library_prefixes: error

    # Avoid leading underscores for local identifiers.
    no_leading_underscores_for_local_identifiers: error

    # Avoid calling toString() on runtimeType.
    # no_runtimeType_toString: error

    # Name non-constant identifiers using lowerCamelCase.
    non_constant_identifier_names: error

    # Noop primitive operations.
    # noop_primitive_operations: error

    # Don’t use null check on a potentially nullable type parameter.
    null_check_on_nullable_type_parameter: error

    # Do not pass null as an argument where a closure is expected.
    null_closures: error

    # Omit type annotations for local variables.
    # omit_local_variable_types: error

    # Avoid defining a one-member abstract class when a simple function will do.
    # one_member_abstracts: error

    # Only throw instances of classes extending either Exception or Error.
    # only_throw_errors: error

    # Don’t override fields.
    overridden_fields: error

    # Provide doc comments for all public APIs.
    # package_api_docs: error

    # Prefix library names with the package name and a dot-separated path.
    package_prefixed_library_names: error

    # Don’t reassign references to parameters of functions or methods.
    # parameter_assignments: error

    # Use adjacent strings to concatenate string literals.
    prefer_adjacent_string_concatenation: error

    # Prefer putting asserts in initializer lists.
    # prefer_asserts_in_initializer_lists: error

    # Prefer asserts with message.
    # prefer_asserts_with_message: error

    # Prefer using a boolean as the assert condition.
    # This rule is deprecated. Do not use it.
    # prefer_bool_in_asserts: error

    # Use collection literals when possible.
    prefer_collection_literals: error

    # Prefer using ??= over testing for null.
    prefer_conditional_assignment: error

    # Prefer const with constant constructors.
    prefer_const_constructors: error

    # Prefer declaring const constructors on @immutable classes.
    prefer_const_constructors_in_immutables: error

    # Prefer const over final for declarations.
    prefer_const_declarations: error

    # Prefer const literals as parameters of constructors on @immutable classes.
    prefer_const_literals_to_create_immutables: error

    # Prefer defining constructors instead of static methods to create instances.
    # prefer_constructors_over_static_methods: error

    # Use contains for List and String instances.
    prefer_contains: error

    # Prefer double quotes where they won’t require escape sequences.
    # prefer_double_quotes: error

    # Use = to separate a named parameter from its default value.
    prefer_equal_for_default_values: error

    # Use => for short members whose body is a single return statement.
    # prefer_expression_function_bodies: error

    # Private field could be final.
    prefer_final_fields: error

    # Prefer final in for-each loop variable if reference is not reassigned.
    # prefer_final_in_for_each: error

    # Prefer final for variable declarations if they are not reassigned.
    # prefer_final_locals: error

    # Prefer final for parameter declarations if they are not reassigned.
    # prefer_final_parameters: error

    # Prefer ‘for’ elements when building maps from iterables.
    prefer_for_elements_to_map_fromIterable: error

    # Use forEach to only apply a function to all the elements.
    # prefer_foreach: error

    # Use a function declaration to bind a function to a name.
    prefer_function_declarations_over_variables: error

    # Prefer generic function type aliases.
    prefer_generic_function_type_aliases: error

    # Prefer if elements to conditional expressions where possible.
    # prefer_if_elements_to_conditional_expressions: error

    # Prefer using if null operators.
    prefer_if_null_operators: error

    # Use initializing formals when possible.
    prefer_initializing_formals: error

    # Inline list item declarations where possible.
    prefer_inlined_adds: error

    # Prefer int literals over double literals.
    # prefer_int_literals: error

    # Use interpolation to compose strings and values.
    prefer_interpolation_to_compose_strings: error

    # Use isEmpty for Iterables and Maps.
    prefer_is_empty: error

    # Use isNotEmpty for Iterables and Maps.
    prefer_is_not_empty: error

    # Prefer is! operator.
    prefer_is_not_operator: error

    # Prefer to use whereType on iterable.
    prefer_iterable_whereType: error

    # Prefer using mixins.
    # prefer_mixin: error

    # Prefer null aware method calls.
    # prefer_null_aware_method_calls: error

    # Prefer using null aware operators.
    prefer_null_aware_operators: error

    # Only use double quotes for strings containing single quotes.
    # prefer_single_quotes: error

    # Use spread collections when possible.
    prefer_spread_collections: error

    # Prefer typing uninitialized variables and fields.
    prefer_typing_uninitialized_variables: error

    # Provide a deprecation message, via @Deprecated(“message”).
    provide_deprecation_message: error

    # Document all public members.
    # public_member_api_docs: error

    # Property getter recursively returns itself.
    recursive_getters: error

    # Use trailing commas for all function calls and declarations.
    # This rule is experimental. Use at your own risk.
    # require_trailing_commas: error

    # SizedBox for whitespace.
    sized_box_for_whitespace: error

    # Use SizedBox shrink and expand named constructors.
    # sized_box_shrink_expand: error

    # Prefer using /// for doc comments.
    slash_for_doc_comments: error

    # Sort child properties last in widget instance creations.
    sort_child_properties_last: error

    # Sort constructor declarations before other members.
    # sort_constructors_first: error

    # Sort unnamed constructor declarations first.
    # sort_unnamed_constructors_first: error

    # Place the super call last in a constructor initialization list.
    # This rule is deprecated. Do not use it.
    # super_goes_last: error

    # Tighten type of initializing formal.
    # tighten_type_of_initializing_formals: error

    # Type annotate public APIs.
    # type_annotate_public_apis: error

    # Don’t type annotate initializing formals.
    type_init_formals: error

    # Future results in async function bodies must be awaited or marked unawaited using dart:async.
    # unawaited_futures: error

    # Unnecessary await keyword in return.
    # unnecessary_await_in_return: error

    # Avoid using braces in interpolation when not needed.
    unnecessary_brace_in_string_interps: error

    # Avoid const keyword.
    unnecessary_const: error

    # Unnecessary .new constructor name.
    unnecessary_constructor_name: error

    # Don’t use final for local variables.
    # unnecessary_final: error

    # Avoid wrapping fields in getters and setters just to be “safe”.
    unnecessary_getters_setters: error

    # Don’t create a lambda when a tear-off will do.
    # unnecessary_lambdas: error

    # Don’t specify the late modifier when it is not needed.
    unnecessary_late: error

    # Avoid library directives unless they have documentation comments or annotations.
    # This rule is experimental. Use at your own risk.
    # unnecessary_library_directive: error

    # Unnecessary new keyword.
    unnecessary_new: error

    # Avoid null in null-aware assignment.
    unnecessary_null_aware_assignments: error

    # Unnecessary null aware operator on extension on a nullable type.
    # unnecessary_null_aware_operator_on_extension_on_nullable: error

    # Unnecessary null checks.
    # This rule is experimental. Use at your own risk.
    # unnecessary_null_checks: error

    # Avoid using null in if null operators.
    unnecessary_null_in_if_null_operators: error

    # Use a non-nullable type for a final variable initialized with a non-nullable value.
    # This rule is experimental. Use at your own risk.
    # unnecessary_nullable_for_final_variable_declarations: error

    # Don’t override a method to do a super method invocation with the same parameters.
    unnecessary_overrides: error

    # Unnecessary parentheses can be removed.
    # unnecessary_parenthesis: error

    # Unnecessary raw string.
    # unnecessary_raw_strings: error

    # Remove unnecessary backslashes in strings.
    unnecessary_string_escapes: error

    # Unnecessary string interpolation.
    unnecessary_string_interpolations: error

    # Don’t access members with this unless avoiding shadowing.
    unnecessary_this: error

    # Unnecessary toList() in spreads.
    # unnecessary_to_list_in_spreads: error

    # Unreachable top-level members in executable libraries.
    # This rule is experimental. Use at your own risk.
    # unreachable_from_main: error

    # Use ColoredBox.
    # use_colored_box: error

    # Use DecoratedBox.
    # use_decorated_box: error

    # Use enums rather than classes that behave like enums.
    # This rule is experimental. Use at your own risk.
    # use_enums: error

    # Prefer an 8-digit hexadecimal integer(0xFFFFFFFF) to instantiate Color.
    use_full_hex_values_for_flutter_colors: error

    # Use generic function type syntax for parameters.
    use_function_type_syntax_for_parameters: error

    # Use if-null operators to convert nulls to bools.
    # use_if_null_to_convert_nulls_to_bools: error

    # Prefer intValue.isOdd/isEven instead of checking the result of % 2.
    # use_is_even_rather_than_modulo: error

    # Use late for private members with a non-nullable type.
    # This rule is experimental. Use at your own risk.
    # use_late_for_private_fields_and_variables: error

    # Use predefined named constants.
    # use_named_constants: error

    # Use raw string to avoid escapes.
    # use_raw_strings: error

    # Use rethrow to rethrow a caught exception.
    use_rethrow_when_possible: error

    # Use a setter for operations that conceptually change a property.
    # use_setters_to_change_properties: error

    # Use string buffers to compose strings.
    # use_string_buffers: error

    # Use string in part of directives.
    # This rule is experimental. Use at your own risk.
    # use_string_in_part_of_directives: error

    # Use super-initializer parameters where possible.
    # This rule is experimental. Use at your own risk.
    # use_super_parameters: error

    # Use throwsA matcher instead of fail().
    # use_test_throws_matchers: error

    # Start the name of the method with to/_to or as/_as if applicable.
    # use_to_and_as_if_applicable: error

    # Don’t assign to void.
    void_checks: error

    # Depend on referenced packages.
    depend_on_referenced_packages: error

    # Use lowercase_with_underscores for package names.
    package_names: error

    # Use secure urls in pubspec.yaml.
    # secure_pubspec_urls: error

    # Sort pub dependencies alphabetically.
    # sort_pub_dependencies: error
